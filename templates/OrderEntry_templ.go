// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"go-store/types"
	"time"
)

func OrderEntry(products []types.Product) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<main><form id=\"store-form\" hx-trigger=\"submit\" hx-post=\"/add_order\" hx-swap=\"innerHTML\" hx-target=\"#asideContent\"><fieldset><legend>Personal Info</legend> <label for=\"first-name\">*First Name:</label><br><input type=\"text\" id=\"first-name\" name=\"fName\" hx-trigger=\"keyup\" hx-target=\"#custTable\" hx-get=\"/get_customers\" hx-swap=\"innerHTML\" pattern=\"[ A-Za-z&#39;]{1,32}\" title=\"Name can only contain letters and apostrophies\" required><br><label for=\"last-name\">*Last Name:</label><br><input type=\"text\" id=\"last-name\" name=\"lName\" hx-trigger=\"keyup\" hx-target=\"#custTable\" hx-get=\"/get_customers\" hx-swap=\"innerHTML\" pattern=\"[ A-Za-z&#39;]{1,32}\" title=\"Name can only contain letters and apostrophies\" required><br><label for=\"email\">*Email:</label><br><input type=\"email\" id=\"email\" name=\"email\" required><br></fieldset><fieldset><legend>Product Info</legend> <label for=\"products\">*Choose a product:</label> <select id=\"products\" name=\"productName\" onchange=\"updateStock()\" required><option value=\"\" disabled selected>Select an option</option> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, prod := range products {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<option value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", prod.ID))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/OrderEntry.templ`, Line: 35, Col: 61}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%s - %.2f", prod.Name,
				prod.Price))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/OrderEntry.templ`, Line: 36, Col: 35}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</option>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</select><br><br><label for=\"availible\">Availible:</label> <input type=\"text\" id=\"availible\" name=\"availible\" readonly><br><label for=\"quantity\">Quantity:</label> <input type=\"number\" id=\"quantity\" name=\"quantity\" value=\"1\" min=\"0\" max=\"100\"></fieldset><input type=\"reset\" value=\"Reset\" style=\"background-color:#ac005e; color:white;\"> <input type=\"submit\" value=\"Submit\"> <input type=\"hidden\" name=\"timestamp\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", time.Now().Unix()))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/OrderEntry.templ`, Line: 47, Col: 94}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"></form></main><aside id=\"asideContent\"><div id=\"table-contents\"><table id=\"custTable\"></table></div></aside><script>\n    document.addEventListener(\"htmx:afterRequest\", function(e) {\n\n        if(e.detail.target.id == \"custTable\"){\n            highlight_row();\n        }\n        if(e.detail.target.id == \"asideContent\"){\n            e.detail.target.reset();\n        }\n    });\n        function highlight_row() {\n            var table = document.getElementById('custTable');\n            var cells = table.getElementsByTagName('td');\n            for (var i = 0; i < cells.length; i++) {\n                // Take each cell\n                var cell = cells[i];\n                // do something on onclick event for cell\n                cell.onclick = function () {\n                    // Get the row id where the cell exists\n                    var rowId = this.parentNode.rowIndex;\n\n                    var rowsNotSelected = table.getElementsByTagName('tr');\n                    for (var row = 0; row < rowsNotSelected.length; row++) {\n                        rowsNotSelected[row].style.backgroundColor = \"\";\n                        rowsNotSelected[row].classList.remove('selected');\n                    }\n                    var rowSelected = table.getElementsByTagName('tr')[rowId];\n                    rowSelected.className += \" selected\";\n                    var values = rowSelected.getElementsByTagName('td')\n                    document.getElementById('first-name').value = values[0].innerHTML;\n                    document.getElementById('last-name').value = values[1].innerHTML;\n                    document.getElementById('email').value = values[2].innerHTML;\n                }\n            }\n\n        }\n    \n        function updateStock(){\n\t\t\tvar input = document.getElementById(\"products\").value;\n            var xmlhttp = new XMLHttpRequest();  \n            xmlhttp.onreadystatechange = function() {  \n            if (this.readyState == 4 && this.status == 200) {  \n                amt = this.responseText;  \n                document.getElementById(\"availible\").value = amt;  \n                document.getElementById(\"quantity\").max = parseInt(amt, 10);\n            }  \n            };  \n            xmlhttp.open(\"GET\", \"get_prod_stock?product=\" + input, true);  \n            xmlhttp.send();  \n\t\t\t\n\t\t}\n    </script><script src=\"https://unpkg.com/htmx.org@2.0.3\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
